{"version":3,"sources":["styledComponent/div.ts","types/customer.ts","actions/customers.ts","types/actions.ts","components/AddCustomer.tsx","components/CustomerListing.tsx","App.tsx","reducers/customers.ts","store/configureStore.ts","index.tsx"],"names":["DivCustom","styled","div","_templateObject","p","orientation","clear","marginTop","marginBottom","newCustomer","id","firstName","lastName","dob","undefined","showHideManagecustomer","showOrHide","type","selectingCustomer","customer","dispatch","getState","selectedCustomer","AddCustomer","Props","useSelector","state","manageCustomerList","showHideManageCustomer","useDispatch","closeAddCustomer","areStatesValid","length","react_default","a","createElement","Modal","open","Header","Content","Description","Form","Field","placeholder","onChange","e","Object","objectSpread","currentTarget","value","react_datepicker_es","showMonthDropdown","maxDate","Date","showYearDropdown","selected","date","placeholderText","Divider","Button","color","disabled","onClick","uuid","addCustomer","toast","success","concat","position","autoClose","editCustomer","editingCustomer","CustomerList","customers","customerSelected","_useState","useState","_useState2","slicedToArray","filter","setFilter","filteredList","_ref","toLowerCase","indexOf","noUser","Segment","secondary","customerListHeader","Grid","Row","Column","width","Input","fluid","icon","bold","className","as","customerList","map","key","toDateString","Icon","onEditCustomer","name","deleteCustomer","deletingCustomer","Container","horizontal","Label","tag","react_toastify","hideProgressBar","newestOnTop","closeOnClick","rtl","draggable","pauseOnHover","components_AddCustomer","Message","info","App","CustomerListing","customerReducerDefaultState","customerReducer","arguments","action","assign","rootReducer","combineReducers","customersReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.c46c0eab.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\ninterface YourProps {\r\n  orientation?: string;\r\n  clear?: boolean;\r\n  marginTop?: string;\r\n  marginBottom?: string;\r\n}\r\nexport const DivCustom = styled.div`\r\n  &&& {\r\n    float: ${(p: YourProps) => p.orientation};\r\n    clear: ${(p: YourProps) => (p.clear ? \"both\" : \"\")};\r\n    margin-top: ${(p: YourProps) => (p.marginTop ? p.marginTop : \"\")};\r\n    margin-bottom: ${(p: YourProps) => (p.marginBottom ? p.marginBottom : \"\")};\r\n  }\r\n`;\r\n","export interface Customer {\r\n  id: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  dob?: Date;\r\n}\r\nexport const newCustomer: Customer = {\r\n  id: \"\",\r\n  firstName: \"\",\r\n  lastName: \"\",\r\n  dob: undefined\r\n};\r\n\r\nexport interface ManageCustomer {\r\n  customers: Customer[];\r\n  showHideManageCustomer: boolean;\r\n  selectedCustomer?: Customer;\r\n}\r\n","import { AppState } from \"./../store/configureStore\";\r\nimport { Customer } from \"./../types/customer\";\r\nimport {\r\n  AppActions,\r\n  ADD_CUSTOMER,\r\n  DELETE_CUSTOMER,\r\n  EDIT_CUSTOMER,\r\n  SHOW_HIDE_MANAGE_CUSTOMER,\r\n  SEARCH_CUSTOMER,\r\n  SET_CUSTOMERS,\r\n  SELECTED_CUSTOMER\r\n} from \"./../types/actions\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nexport const addCustomer = (customer: Customer): AppActions => ({\r\n  type: ADD_CUSTOMER,\r\n  customer\r\n});\r\n\r\nexport const editCustomer = (customer: Customer): AppActions => ({\r\n  type: EDIT_CUSTOMER,\r\n  customer\r\n});\r\n\r\nexport const showHideManagecustomer = (showOrHide: boolean): AppActions => ({\r\n  type: SHOW_HIDE_MANAGE_CUSTOMER,\r\n  showOrHide\r\n});\r\nexport const selectedCustomer = (customer: Customer): AppActions => ({\r\n  type: SELECTED_CUSTOMER,\r\n  customer\r\n});\r\nexport const deleteCustomer = (id: string): AppActions => ({\r\n  type: DELETE_CUSTOMER,\r\n  id\r\n});\r\n\r\nexport const searchCustomer = (search: string): AppActions => ({\r\n  type: SEARCH_CUSTOMER,\r\n  search\r\n});\r\n\r\nexport const setCustomers = (customers: Customer[]): AppActions => ({\r\n  type: SET_CUSTOMERS,\r\n  customers\r\n});\r\n\r\nexport const addingCustomer = (customer: Customer) => {\r\n  return (dispatch: Dispatch<AppActions>, getState: () => AppState) => {\r\n    dispatch(addCustomer(customer));\r\n  };\r\n};\r\n\r\nexport const editingCustomer = (customer: Customer) => {\r\n  return (dispatch: Dispatch<AppActions>, getState: () => AppState) => {\r\n    dispatch(editCustomer(customer));\r\n  };\r\n};\r\n\r\nexport const selectingCustomer = (customer: Customer) => {\r\n  return (dispatch: Dispatch<AppActions>, getState: () => AppState) => {\r\n    dispatch(selectedCustomer(customer));\r\n  };\r\n};\r\nexport const deletingCustomer = (id: string) => {\r\n  return (dispatch: Dispatch<AppActions>, getState: () => AppState) => {\r\n    dispatch(deleteCustomer(id));\r\n  };\r\n};\r\n\r\nexport const searchingCustomer = (search: string) => {\r\n  return (dispatch: Dispatch<AppActions>, getState: () => AppState) => {\r\n    dispatch(searchCustomer(search));\r\n  };\r\n};\r\n\r\nexport const settingCustomer = (customers: Customer[]) => {\r\n  return (dispatch: Dispatch<AppActions>, getState: () => AppState) => {\r\n    dispatch(setCustomers(customers));\r\n  };\r\n};\r\n","import { CustomerActionTypes, SetCustomerAction } from \"./actions\";\r\nimport { Customer } from \"./customer\";\r\nexport const ADD_CUSTOMER = \"ADD_CUSTOMER\";\r\nexport const EDIT_CUSTOMER = \"EDIT_CUSTOMER\";\r\nexport const SELECTED_CUSTOMER = \"SELECTED_CUSTOMER\";\r\nexport const DELETE_CUSTOMER = \"DELETE_CUSTOMER\";\r\nexport const SET_CUSTOMERS = \"SET_CUSTOMERS\";\r\nexport const SEARCH_CUSTOMER = \"SEARCH_CUSTOMER\";\r\nexport const SHOW_HIDE_MANAGE_CUSTOMER = \"SHOW_HIDE_MANAGE_CUSTOMER\";\r\n\r\nexport interface SetCustomerAction {\r\n  type: typeof SET_CUSTOMERS;\r\n  customers: Customer[];\r\n}\r\n\r\nexport interface EditCustomerAction {\r\n  type: typeof EDIT_CUSTOMER;\r\n  customer: Customer;\r\n}\r\n\r\nexport interface SelectedCustomerAction {\r\n  type: typeof SELECTED_CUSTOMER;\r\n  customer: Customer;\r\n}\r\nexport interface DeleteCustomerAction {\r\n  type: typeof DELETE_CUSTOMER;\r\n  id: string;\r\n}\r\n\r\nexport interface AddCustomerAction {\r\n  type: typeof ADD_CUSTOMER;\r\n  customer: Customer;\r\n}\r\n\r\nexport interface SearchCustomerAction {\r\n  type: typeof SEARCH_CUSTOMER;\r\n  search: string;\r\n}\r\n\r\nexport interface ShowHideManageCustomerAction {\r\n  type: typeof SHOW_HIDE_MANAGE_CUSTOMER;\r\n  showOrHide: boolean;\r\n}\r\nexport type CustomerActionTypes =\r\n  | SetCustomerAction\r\n  | AddCustomerAction\r\n  | EditCustomerAction\r\n  | DeleteCustomerAction\r\n  | SearchCustomerAction\r\n  | ShowHideManageCustomerAction\r\n  | SelectedCustomerAction;\r\n\r\nexport type AppActions = CustomerActionTypes;\r\n","import React from \"react\";\r\nimport { Button, Modal, Divider, Form } from \"semantic-ui-react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { AppState } from \"../store/configureStore\";\r\nimport { toast } from \"react-toastify\";\r\nimport {\r\n  showHideManagecustomer,\r\n  addingCustomer,\r\n  selectingCustomer,\r\n  editingCustomer\r\n} from \"../actions/customers\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport uuid from \"uuid/v4\";\r\nimport { Customer, newCustomer } from \"../types/customer\";\r\ninterface IProps {\r\n  selectedCustomer: Customer;\r\n}\r\nconst AddCustomer: React.FC<IProps> = Props => {\r\n  const showOrHide = useSelector((state: AppState) =>\r\n    state.manageCustomerList\r\n      ? state.manageCustomerList.showHideManageCustomer\r\n      : false\r\n  );\r\n  const dispatch = useDispatch();\r\n  const selectedCustomer = Props.selectedCustomer;\r\n  const closeAddCustomer = () => {\r\n    dispatch(selectingCustomer(newCustomer));\r\n    dispatch(showHideManagecustomer(false));\r\n  };\r\n  const addCustomer = () => {\r\n    if (selectedCustomer.id === \"\") {\r\n      dispatch(addingCustomer({ ...selectedCustomer, id: uuid() }));\r\n      toast.success(\r\n        `${selectedCustomer.firstName +\r\n          \" \" +\r\n          selectedCustomer.lastName} is added successfully!`,\r\n        {\r\n          position: \"top-right\",\r\n          autoClose: 3000\r\n        }\r\n      );\r\n    } else {\r\n      dispatch(editingCustomer(selectedCustomer));\r\n      toast.success(\r\n        `${selectedCustomer.firstName +\r\n          \" \" +\r\n          selectedCustomer.lastName} is updated successfully!`,\r\n        {\r\n          position: \"top-right\",\r\n          autoClose: 3000\r\n        }\r\n      );\r\n    }\r\n\r\n    closeAddCustomer();\r\n  };\r\n\r\n  const selectDOB = (date: Date) => {\r\n    dispatch(selectingCustomer({ ...selectedCustomer, dob: date }));\r\n  };\r\n  const firstNameChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    dispatch(\r\n      selectingCustomer({\r\n        ...selectedCustomer,\r\n        firstName: e.currentTarget.value\r\n      })\r\n    );\r\n  };\r\n  const lastNameChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    dispatch(\r\n      selectingCustomer({\r\n        ...selectedCustomer,\r\n        lastName: e.currentTarget.value\r\n      })\r\n    );\r\n  };\r\n  const areStatesValid =\r\n    selectedCustomer.firstName.length > 0 &&\r\n    selectedCustomer.lastName.length > 0 &&\r\n    selectedCustomer.dob;\r\n\r\n  return (\r\n    <Modal open={showOrHide}>\r\n      <Modal.Header>\r\n        Enter the customer details (All fields are mandatory)\r\n      </Modal.Header>\r\n      <Modal.Content>\r\n        <Modal.Description>\r\n          <Form>\r\n            <Form.Field>\r\n              <label>First Name</label>\r\n              <input\r\n                placeholder=\"First Name\"\r\n                onChange={firstNameChange}\r\n                value={selectedCustomer.firstName}\r\n              />\r\n            </Form.Field>\r\n            <Form.Field>\r\n              <label>Last Name</label>\r\n              <input\r\n                placeholder=\"Last Name\"\r\n                onChange={lastNameChange}\r\n                value={selectedCustomer.lastName}\r\n              />\r\n            </Form.Field>\r\n            <Form.Field>\r\n              <label>Date of Birth</label>\r\n              <span>\r\n                <DatePicker\r\n                  showMonthDropdown={true}\r\n                  maxDate={new Date()}\r\n                  showYearDropdown={true}\r\n                  selected={selectedCustomer.dob}\r\n                  onChange={selectDOB}\r\n                  placeholderText=\"Click to select a date\"\r\n                />\r\n              </span>\r\n            </Form.Field>\r\n          </Form>\r\n        </Modal.Description>\r\n        <Divider />\r\n        <Button color=\"green\" disabled={!areStatesValid} onClick={addCustomer}>\r\n          Save\r\n        </Button>\r\n        <Button color=\"red\" onClick={closeAddCustomer}>\r\n          Cancel\r\n        </Button>\r\n      </Modal.Content>\r\n    </Modal>\r\n  );\r\n};\r\nexport default AddCustomer;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Input,\r\n  Container,\r\n  Label,\r\n  Header,\r\n  Icon,\r\n  Button,\r\n  Grid,\r\n  Divider,\r\n  Segment,\r\n  Message\r\n} from \"semantic-ui-react\";\r\nimport { DivCustom } from \"../styledComponent/div\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { AppState } from \"../store/configureStore\";\r\nimport { Customer, newCustomer } from \"../types/customer\";\r\nimport {\r\n  deletingCustomer,\r\n  showHideManagecustomer,\r\n  selectingCustomer\r\n} from \"../actions/customers\";\r\nimport AddCustomer from \"./AddCustomer\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nconst CustomerList: React.FC = () => {\r\n  const customers = useSelector((state: AppState) =>\r\n    state.manageCustomerList ? state.manageCustomerList.customers : []\r\n  );\r\n\r\n  const customerSelected =\r\n    useSelector((state: AppState) =>\r\n      state.manageCustomerList\r\n        ? state.manageCustomerList.selectedCustomer\r\n        : newCustomer\r\n    ) || newCustomer;\r\n\r\n  let [filter, setFilter] = useState<string>(\"\");\r\n  const filteredList: Customer[] =\r\n    filter === \"\"\r\n      ? customers\r\n      : customers.filter(\r\n          ({ firstName, lastName }) =>\r\n            firstName.toLowerCase().indexOf(filter.toLowerCase()) >= 0 ||\r\n            lastName.toLowerCase().indexOf(filter.toLowerCase()) >= 0\r\n        );\r\n\r\n  const dispatch = useDispatch();\r\n  const onDeleteCustomer = (id: string) => {\r\n    dispatch(deletingCustomer(id));\r\n  };\r\n  const addCustomer = () => {\r\n    dispatch(selectingCustomer(newCustomer));\r\n    dispatch(showHideManagecustomer(true));\r\n  };\r\n  const onEditCustomer = (customer: Customer) => {\r\n    dispatch(selectingCustomer(customer));\r\n    dispatch(showHideManagecustomer(true));\r\n  };\r\n  const updatingFilter = (e: React.FormEvent<HTMLInputElement>) => {\r\n    setFilter(e.currentTarget.value);\r\n  };\r\n  const noUser =\r\n    filteredList.length === 0 ? (\r\n      <DivCustom marginTop=\"2%\">\r\n        <Segment secondary>\r\n          There are no records to display. Please change your searc string or\r\n          add New customer\r\n        </Segment>\r\n      </DivCustom>\r\n    ) : (\r\n      \"\"\r\n    );\r\n  const customerListHeader = (\r\n    <Grid>\r\n      <Grid.Row>\r\n        <Grid.Column width={16}>\r\n          <Input\r\n            fluid\r\n            icon=\"search\"\r\n            onChange={updatingFilter}\r\n            value={filter}\r\n            placeholder=\"Search...\"\r\n          />\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n      <Grid.Row bold>\r\n        <Grid.Column className=\"bold\" width={5}>\r\n          <Header as=\"h4\">First Name</Header>\r\n        </Grid.Column>\r\n        <Grid.Column width={5}>\r\n          <Header as=\"h4\">Last Name</Header>\r\n        </Grid.Column>\r\n        <Grid.Column width={4}>\r\n          <Header as=\"h4\">Date of Birth</Header>\r\n        </Grid.Column>\r\n        <Grid.Column width={1}></Grid.Column>\r\n        <Grid.Column width={1}></Grid.Column>\r\n      </Grid.Row>\r\n      <Divider />\r\n    </Grid>\r\n  );\r\n\r\n  const customerList = (\r\n    <Grid>\r\n      {filteredList.map(customer => {\r\n        return (\r\n          <Grid.Row key={customer.id}>\r\n            <Grid.Column width={5}>{customer.firstName}</Grid.Column>\r\n            <Grid.Column width={5}>{customer.lastName}</Grid.Column>\r\n            <Grid.Column width={4}>\r\n              {customer.dob\r\n                ? customer.dob.toDateString()\r\n                : \"Date of Birth not provided\"}\r\n            </Grid.Column>\r\n            <Grid.Column width={1}>\r\n              <Icon\r\n                onClick={() => onEditCustomer(customer)}\r\n                color=\"grey\"\r\n                name=\"edit\"\r\n              />\r\n            </Grid.Column>\r\n            <Grid.Column width={1}>\r\n              <Icon\r\n                onClick={() => onDeleteCustomer(customer.id)}\r\n                color=\"red\"\r\n                name=\"trash\"\r\n              />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        );\r\n      })}\r\n    </Grid>\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      <DivCustom marginTop=\"5%\" marginBottom=\"5%\">\r\n        <Divider horizontal>\r\n          <Header as=\"h3\">\r\n            <Icon name=\"user\" />\r\n            Welcome to the customer listing page.\r\n          </Header>\r\n        </Divider>\r\n      </DivCustom>\r\n\r\n      <DivCustom>\r\n        <DivCustom orientation=\"left\">\r\n          <Button name=\"addCustomer\" color=\"blue\" onClick={addCustomer}>\r\n            <Icon name=\"add\" /> Add New Customer\r\n          </Button>\r\n        </DivCustom>\r\n        <DivCustom orientation=\"right\">\r\n          <Label as=\"a\" color=\"grey\" tag>\r\n            Displaying {filteredList.length}/{customers.length} customers\r\n          </Label>\r\n        </DivCustom>\r\n      </DivCustom>\r\n      <DivCustom clear={true}>\r\n        {customerListHeader}\r\n        {customerList}\r\n        {noUser}\r\n      </DivCustom>\r\n      <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n      {/* Same as */}\r\n      <ToastContainer />\r\n      <AddCustomer selectedCustomer={customerSelected} />\r\n      <DivCustom marginTop=\"5%\">\r\n        <Message info>\r\n          <Message.Header>\r\n            Customer Listing App (feature and tech stack)\r\n          </Message.Header>\r\n          <ul>\r\n            <li>You can add customer using `Add New Customer` buttton</li>\r\n            <li>\r\n              Filtered/Total record count is displayed on top right hand side\r\n            </li>\r\n            <li>Search is based on first and last name</li>\r\n          </ul>\r\n          <div></div>\r\n          <ul>\r\n            <li> npm run start : to start the app in dev mode</li>\r\n            <li>npm run test-coverage: to run the test and coverage report </li>\r\n          </ul>\r\n          <ul>\r\n            <li>React using Hooks</li>\r\n\r\n            <li>Redux supporting hooks</li>\r\n            <li>Tests using Jest and enzyme: (using mock and app store)</li>\r\n            <li>\r\n              Basic usage of styled component (styled div to left and right\r\n              component) passing props as well\r\n            </li>\r\n            <li>Using React semantic UI controls and React date picker</li>\r\n            <li>Keeping Responsiveness of UI intact</li>\r\n            <li>Generating the boiler plate using Create React App</li>\r\n          </ul>\r\n        </Message>\r\n      </DivCustom>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CustomerList;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport CustomerList from \"./components/CustomerListing\";\nconst App: React.FC = () => {\n  return (\n    <div>\n      <CustomerList />\n    </div>\n  );\n};\n\nexport default App;\n","import {\r\n  ADD_CUSTOMER,\r\n  CustomerActionTypes,\r\n  DELETE_CUSTOMER,\r\n  EDIT_CUSTOMER,\r\n  SHOW_HIDE_MANAGE_CUSTOMER,\r\n  SELECTED_CUSTOMER\r\n} from \"./../types/actions\";\r\nimport { ManageCustomer } from \"./../types/customer\";\r\nconst customerReducerDefaultState: ManageCustomer = {\r\n  showHideManageCustomer: false,\r\n  customers: []\r\n};\r\n\r\nconst customerReducer = (\r\n  state = customerReducerDefaultState,\r\n  action: CustomerActionTypes\r\n): ManageCustomer => {\r\n  switch (action.type) {\r\n    case ADD_CUSTOMER:\r\n      return Object.assign(\r\n        {},\r\n        { ...state },\r\n        { customers: state.customers.concat(action.customer) }\r\n      );\r\n\r\n    case SHOW_HIDE_MANAGE_CUSTOMER:\r\n      return { ...state, showHideManageCustomer: action.showOrHide };\r\n\r\n    case SELECTED_CUSTOMER:\r\n      return { ...state, selectedCustomer: action.customer };\r\n    case DELETE_CUSTOMER:\r\n      return Object.assign(\r\n        {},\r\n        { ...state },\r\n        { customers: state.customers.filter(({ id }) => id !== action.id) }\r\n      );\r\n    case EDIT_CUSTOMER:\r\n      return Object.assign(\r\n        {},\r\n        { ...state },\r\n        {\r\n          customers: state.customers.map(customer => {\r\n            if (customer.id === action.customer.id) {\r\n              return {\r\n                ...customer,\r\n                ...action.customer\r\n              };\r\n            } else {\r\n              return customer;\r\n            }\r\n          })\r\n        }\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default customerReducer;\r\n","import { AppActions } from \"./../types/actions\";\r\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunk, { ThunkMiddleware } from \"redux-thunk\";\r\nimport customersReducer from \"../reducers/customers\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  manageCustomerList: customersReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(\r\n    applyMiddleware(thunk as ThunkMiddleware<AppState, AppActions>)\r\n  )\r\n);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/configureStore\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}